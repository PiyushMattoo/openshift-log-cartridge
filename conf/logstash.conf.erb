# See http://logstash.net/docs/latest/ for documentation on how to configure Logstash.

input {
    file {
        path => "<%= ENV['OPENSHIFT_LOG_DIR'] %>*.log"
		sincedb_path => <%= ENV['OPENSHIFT_DATA_DIR'] %>/since.db
        codec => multiline {
		  pattern => "^%{TIMESTAMP_ISO8601} "
		  negate => true
		  what => previous
		}
    }
}

filter {
      grok {
        match => [
             "message", "%{TIMESTAMP_ISO8601:time} %{LOGLEVEL:level} (?m)%{GREEDYDATA:logmessage}",
             "path","%{GREEDYDATA}/%{GREEDYDATA:filename}\.log"
        ]
        break_on_match => false
      }
	  ruby {
	    code => "require 'base64';
		event['enccred'] = Base64.encode64('<%= ENV['OPENSHIFT_DORADUS_USER'] %>:<%= ENV['OPENSHIFT_DORADUS_PWD'] %>').gsub(/\n/, '')"
      }
}

output {
    batched_http {
	    http_method => "post"
		url => "http://<%= ENV['OPENSHIFT_DORADUS_HOST'] %>:<%= ENV['OPENSHIFT_DORADUS_PORT'] %>/LoggingApplication/logs_<%= ENV['OPENSHIFT_APP_NAME'] %>_<%= ENV['OPENSHIFT_NAMESPACE'] %>?tenant=<%= ENV['OPENSHIFT_DORADUS_TENANT'] %>"
		format => "message"
		headers => ["Authorization","Basic %{enccred}"]
        content_type => "application/json"
		batched => '{ "doc": { "Timestamp": "%{time}", "LogLevel": "%{level}","LogMessage": "%{logmessage}", "Source": "%{filename}" } }'
        message => '{"batch": { "docs": [ %{batched} ] } }'
    }
}
